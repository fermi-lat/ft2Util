/** @file GapHandler.h
@brief declare class GapHandler
*/

//Avoid to include this header more than one time
#ifndef GAPHANDLER_H
#define GAPHANDLER_H

#include "Ttypes.h"
#include "ft2Util/TimeInterval.h"

class TFile;
class TTree;
class DigiEvent;

namespace ft2Util
{
/**
*@class GapHandler
* @brief Look for gaps and discrepancies between Digi and Merit files.
* @author Giacomo Vianello <giacomov@slac.stanford.edu>
*/
class GapHandler
{
public:
    /**
    Constructor.
    @param digiFile The path of the Digi file
    @param meritFile The path of the Merit file
    @param digiGapFile The path of the Digi gap file
    */
    GapHandler(const std::string& digiFile, const std::string& meritFile, const std::string& digiGapFile, 
                        std::vector<TimeInterval> &timeIntervals);
    ~GapHandler();

private:
    //!This vector will contain all the bad time intervals, i.e., the time intervals when there are gaps in the Digi file or in the Merit file
    std::vector<TimeInterval> m_badTimeIntervals;
    
    inline void enforceOrderedEventID(Long64_t eventID1, Long64_t eventID2, const std::string tree);
    inline void enforceTimeOrder(ULong64_t t1, ULong64_t t2);
    
    void mergeGoodAndBadTimeIntervals(std::vector<TimeInterval> &timeIntervals);
    /**
    *@brief Parse the DigiGAP file
    A DigiGAP file is a text file generated by the package svac/findGaps . It contains the list of gaps occurred for a particular run.
    A gap can occur when there are missing data downloaded from the spacecraft.
    */     
    void parseGapFile(const std::string &gapFile);
    
    void handleDigiGap();
    void handleMeritGap();
    void verifyDigiAndMerit();
    void openDigiFile(const std::string& digiFile);
    void openMeritFile(const std::string& meritFile);
    bool digiSpansOneRun();
    bool meritSpansOneRun();
    
    Long64_t m_runNumber;
    double m_requestedStartTime,m_requestedStopTime;
    
    //Digi        
    TFile* m_digiFile;
    TTree* m_digiTree;
    DigiEvent* m_digiEvt;
    Long64_t m_nDigiEvts;
    double m_digiStart;
    Long64_t m_digiStartID;
    double m_digiStop;
    Long64_t m_digiStopID;
    Long64_t m_curDigiEvtId;
    Long64_t m_prevDigiID;
    ULong64_t m_prevDigiEvtLivetime;
    
    //Merit
    TFile* m_meritFile;
    TTree* m_meritTree;
    UInt_t* m_meritEvtId;
    Long64_t m_nMeritEvts;
    double m_meritStart;
    Long64_t m_meritStartID;
    double m_meritStop;
    Long64_t m_meritStopID;
    Long64_t m_curMeritEvtId;
    Long64_t m_prevMeritID;
};
}
#endif
